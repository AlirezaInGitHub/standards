# Register Security Profile

## Overview
The security profile of the CDR Register follows the conventions defined by the [Consumer Data Standards Security Profile](https://consumerdatastandardsaustralia.github.io/standards/#security-profile)

1.	The CDR Register Secured APIs will use `Mutual Authentication TLS` **[MTLS]** as the transport security and the OIDC </br>`client_credentials` grant type authentication

2.	The CDR Register unsecured APIs will use **[TLS]** as the transport security with no authentication requirements

3.  All client and server certificates are generated by the CDR Register certificate authority to facilitate this transport. Please see the [Certificate Management section](#certificate-management) for further details

4.	The Client Authentication method to be used by ADRs to the CDR Register will use `private_key_jwt` for procuring access tokens


Please refer to the [Consumer Data Standards Security Overview](https://consumerdatastandardsaustralia.github.io/standards/#security-profile) for Symbols and Abbreviated Terms


## Register Endpoints

The CDR Register exposes an OIDC Configuration Endpoint with associated JWKS and token endpoints to faciliate issuance of access tokens to consume the protected Register APIs.

> Retrieve CDR Register OIDC Discovery Endpoint

```
GET /.well-known/openid-configuration HTTP/1.1
Host: cdr.register

## Response
{
    "issuer": "https://cdr.register/idp",
    "jwks_uri": "https://cdr.register/idp/.well-known/openid-configuration/jwks",
    "token_endpoint": "https://cdr.register/idp/connect/token",
    "claims_supported": ["sub"],
    "id_token_signing_alg_values_supported": ["PS256"],
    "subject_types_supported": ["public"],
    "scopes_supported": ["cdr-register:bank:read"],
    "response_types_supported": ["token"],
    "grant_types_supported": ["client_credentials"],
    "token_endpoint_auth_methods_supported": ["private_key_jwt"],
    "tls_client_certificate_bound_access_tokens": true,
    "request_object_signing_alg_values_supported": ["PS256"]
}

```



### Retrieving Access Token
<img class=medium-image src="images/RetrieveAccessToken.png" ></img>



## Client Authentication

> Request CDR Register Access Token

```
POST /token HTTP/1.1
Host: cdr.register
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials&
  client_id=<brand id> OR <software product id> &
  client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer&
  client_assertion=eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyNDU2In0.ey ...&
  scope=cdr-register%3Abank%3Aread

## Decoded client assertion JWT
{
  "alg": "PS256",
  "typ": "JWT",
  "kid": "b50641343f8f4717a4865d238b6297b8"
}
{
  "iss": "<brand id> OR <software product id>",
  "sub": "<brand id> OR <software product id>",
  "exp": 1516239322,
  "aud": "https://cdr.register/idp/connect/token",
  "jti": "37747cd1-c105-4569-9f75-4adf28b73e31"
}


## Response
{
    "access_token": "eyJhbGciOiJQUz...",
    "expires_in": 7200,
    "token_type": "Bearer",
    "scope": "cdr-register:bank:read openid"
}
```

Please refer to the [Consumer Data Standard](https://consumerdatastandardsaustralia.github.io/standards/#client-authentication) for reference to the client authentication methods from the CDR Register to participants.

### Client Authentication with the CDR Register

Interactions with the CDR Register uses the `private_key_jwt` client authentication method as specified at [section 9](https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication) of **[OIDC]**. This maintains alignment with the [Consumer Data Standards](https://consumerdatastandardsaustralia.github.io/standards/#client-authentication)

### CDR Register Access Token Request using Client Authentication

* The CDR Register MUST support the authentication of the Data Recipients using the `private_key_jwt` client authentication method

* CDR Register public keys MUST only be obtained from the exposed endpoint exposed for this purpose.

As per the [Consumer Data Standards](https://consumerdatastandardsaustralia.github.io/standards/#client-authentication), While **[MTLS]** is utilised for transaction security and as a Holder of Key mechanism the PKI Mutual TLS OAuth Client Authentication Method SHALL NOT be supported as the mechanism for client authentication.


1. Access Token will be requested as per the Assertion Framework for OAuth2 Client Authentication profile
2. Data Holder and Data Recipient public keys are retrieved from the CDR Register
3. Refresh tokens will not be provided for grant_type `client_credentials`
4.	The JWT must contain the following Claim Values :

-	`iss`: REQUIRED. Issuer. This MUST contain the `Data Recipient Brand ID` OR `Software Product ID` issued by the CDR Register
-	`sub`: REQUIRED. Subject. This MUST contain the `Data Recipient Brand ID` OR `Software Product ID` issued by the CDR Register
-	`aud`: REQUIRED. Audience. The URL of the end point being invoked
-	`exp`: REQUIRED. Expiration time on or after which the JWT MUST NOT be accepted for processing
-	`jti`: REQUIRED. JWT ID. A unique identifier for the token, which can be used to prevent reuse of the token. These tokens MUST only be used once.

When invoking the protected end point, the assertion MUST be sent with the `POST` method and MUST include the following parameters:

-	`grant_type`: This MUST be set to `client_credentials`
-	`client_id`: This MUST be set to the ID of the calling client `Data Recipient Brand ID` OR `Software Product ID`
-	`client_assertion_type`: This MUST be set to: `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`
-	`client_assertion`: This MUST be set to the digitally signed JWT



### Identifiers
`client_id`, `sub` and where appropriate `iss`, are expected to contain the unique identifier for the client.<br>
The following client identifiers will be used:

| Client | Scenario | Identifier |
|-----------|------------------|----------------------------------------------------------------------------|
|**Software Product**| Calls to Data Holder Brand Authenticated APIs | `Client ID` as issued by the target Data Holder Brand
|**Data Recipient Brand / Software Product**| Calls to [CDR Register Authenticated APIs](#consumer-data-right-cdr-register-apis) | `Data Recipient Brand ID` or `Software Product ID` as issued by CDR Register
|**Data Holder Brand**|	Calls to Data Recipient [Revocation](https://consumerdatastandardsaustralia.github.io/standards/#end-points) and [CDR Arrangement Management](https://consumerdatastandardsaustralia.github.io/standards/#end-points) APIs | `Data Holder Brand ID` as issued by CDR Register

* _`Data Recipient Brand ID` as a client identifier will be deprecated in a future version of the CDR Register design and is currently retained for backwards compatibility_

## Transaction Security
Please refer to the [Consumer Data Standards Transaction Security](https://consumerdatastandardsaustralia.github.io/standards/#transaction-security) for Transaction Security details

## Participant Endpoints

> OIDC Discovery Configuration Endpoint

```
<InfoSecBaseUri>/.well-known/openid-configuration

```


Participants will be required to register base URIs against each of their brands to facilitate the implementation of the Consumer Data Standards

| Base URI | DH Brand | ADR Brand | Description
|-----------|------|------|-----------------------------------------------------------------------------------------------|
|**PublicBaseUri**|	<i class="icon-check"></i> | | Base URI for the Consumer Data Standard public endpoints. This should encompass all endpoints not requiring authentication |
|**ResourceBaseUri**|	<i class="icon-check"></i> | | Base URI for the Consumer Data Standard resource endpoints. This should encompass all CDS resource endpoints requiring authentication |
|**InfoSecBaseUri**|	<i class="icon-check"></i> | | Base URI for the Consumer Data Standard InfoSec endpoints. This provides ADRs reference to the [OIDC Discovery Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html) |
|**AdminBaseUri**|	<i class="icon-check"></i> | | Base URI for the Consumer Data Standard admin endpoints called by the CDR Register |
|**ExtensionBaseUri**|	<i class="icon-check"></i> | | Base URI for the Data Holder extension endpoints to the Consumer Data Standard **(optional)** |
|**RevocationUri**|	| <i class="icon-check"></i> | Used for consent withdrawal notification from a Data Holder and is populated in the [SSA](#dynamic-client-registration) |
|**RecipientBaseUri**|	| <i class="icon-check"></i> | Base URI for the Consumer Data Standard Data Recipient endpoints. </br>This should be the base to provide reference to [Data Recipient Endpoints](https://consumerdatastandardsaustralia.github.io/standards/#end-points) |
|**JwksUri**|	<i class="icon-check"></i> | <i class="icon-check"></i> | **DH:** Used for client authentication for DH -> ADR communication and is populated in the [GetDataHolderBrands API](#getdataholderbrands)</br> **ADR:** Used for client authentication for ADR -> DH & Register communication and is populated in the [SSA](#dynamic-client-registration) |


## JWKS Cache Management
`JWKS_URI` clients are expected to cache and refresh JWKS periodically as key sets will change over time due to key rotation.

Key rotation is expected for the following scenarios:

1. `JWKS_URI` owner rotates key on a regular basis as a security hygiene task
2. `JWKS_URI` owner rotates key due to a compromised key

It is recommended that the upper bound is constrained to **15 minutes** with an additional recommendation that timeout period be configurable (not hard coded) to cater for the case where the timeout needs to change due to a threat or breach.


## Certificate Management

### Issued by ACCC CA for Data Holders
Certificate | Function | Notes
-----------|------------------------------------------|------------------------------
|**Server Certificate(s)**|	Certificate is issued to a FQDN</br></br>Secures the following:</br>- Resource endpoints</br>- InfoSec endpoints</br>- Admin endpoints | It will be up to the DH on how these endpoints are</br>segregated. They may all be on the one domain</br>(so only one certificate required) or could be separated


### Issued by ACCC CA for Accredited Data Recipients
Certificate | Function | Notes
-----------|------------------------------------------|------------------------------
|**Client Certificate**| Secures the following:</br>- Consuming Register APIs</br>- Consuming Data Holder APIs
|**Server Certificate(s)**|	Certificate is issued to a FQDN</br></br>Secures the following:</br>- Revocation endpoint </br>- CDR Arrangement Management endpoint </br>- JWKS endpoint | ADRs may choose to secure their [endpoints](https://consumerdatastandardsaustralia.github.io/standards/#end-points) </br> with an ACCC CA issued certificate or a certificate </br>issued by a public CA

[CDR Arrangement Management Endpoint](https://consumerdatastandardsaustralia.github.io/standards/#end-points) is a requirement from **November 2020**


### CDR Certificate Authority
[DigiCert](https://www.digicert.com) acts as the certificate authority that issues and manages certificates to CDR participants as directed by the ACCC in its capacity as the CDR Registrar


### Certificate Trust Model
The CDR utilises a private certificate trust chain for all ACCC CA secured endpoints being hosted by [Data Holders](#participant-endpoints), [Data Recipients](#participant-endpoints) and the [CDR Register](#consumer-data-right-cdr-register-apis).

This trust chain encompasses a set of root and intermediate CAs issued for the test and production environments

|||
|---|---|
|**Test Environment**|[CA Root Test](register/certificates/test/ca_root_test.cer)</br>[CA Intermediate Test](register/certificates/test/ca_intermediate_test.cer)|
||
|**Production Environment**|[CA Root Production](register/certificates/production/ca_root_prod.cer)</br>[CA Intermediate Production](register/certificates/production/ca_intermediate_prod.cer)|



### Certificate Signing Request Profile
When requesting ACCC CA certificates, certificate signing requests will need to be provided, conforming to the following profile:

CSR Field | Server | Client
-----------|------------------------------------------|------------------------------
|**Common Name**| Primary DNS Name</br>*e.g. api1.test.entity.com* | Software Product Name OR </br>Brand Name
|**SAN (Optional)**| Secondary DNS Name(s) </br>*e.g. api2.test.entity.com* | N/A
|**Organization**| Brand Name (Legal Entity Name)	| Brand Name (Legal Entity Name)
|**Organizational Unit**| Consumer Data Right | Consumer Data Right
|**Country**|	Country of participant</br>*e.g. AU* | Country of participant</br>*e.g. AU*
|**Signature Algorithm**|	SHA256 | SHA256
|**Key Algorithm**| RSA | RSA
|**Key Size**| 2048 | 2048

Please refer to the [onboarding guide](https://www.accc.gov.au/focus-areas/consumer-data-right-cdr-0/on-boarding-guide) for further information on certificate issuance

### Certificate Usage
Further details on ACCC CA issued certificates can be found in the [ACCC Certificate Practice Statement V1.0](https://www.cdr.gov.au/sites/default/files/2020-12/CDR%20-%20ACCC%20Certification%20practice%20statement.pdf)

### Certificate Validation
The Certificate Practice Statement provides details for DigiCert's certificate validation requirements and a summary has been provided in the CDR Support Portal article: [Certificate Validation](https://cdr-support.zendesk.com/hc/en-us/articles/900005826963-Certificate-Validation)

To summarise, certificate validation must check:

**1. Checking for certificate validity**

Verify private key signature is mathematically linked to the presented public key certificate, presented certificate identifies trusted User/Application and/or Service and certificate is both valid and not revoked

**2. Issuer‐to‐subject name chaining**

Signatures from Issuing CA’s and associated CA public key certificates are trusted, valid and not revoked

**3. Policy and key use constraints**

Each certificate has the applicable and appropriate x.509 certificate extensions, e.g. CA and CRL signing, Digital Signing, Client and Server Authentication, etc

**4. Revocation Status**

Status is checked through Certificate Revocation Lists (CRL) or Online Certificate Status Protocol (OCSP) responders, identified in each certificate in the chain.


### OCSP stapling
The use of OCSP Stapling within the CDR ecosystem is not currently recommended.
